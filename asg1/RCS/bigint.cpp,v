head	1.7;
access;
symbols;
locks;
comment	@// @;


1.7
date	2017.07.10.05.52.42;	author -;	state -;
branches;
next	1.6;

1.6
date	2017.07.10.05.50.33;	author -;	state -;
branches;
next	1.5;

1.5
date	2017.07.10.00.35.50;	author -;	state -;
branches;
next	1.4;

1.4
date	2017.07.10.00.29.54;	author -;	state -;
branches;
next	1.3;

1.3
date	2017.07.10.00.25.23;	author -;	state -;
branches;
next	1.2;

1.2
date	2017.07.10.00.24.45;	author -;	state -;
branches;
next	1.1;

1.1
date	2017.07.10.00.17.53;	author -;	state -;
branches;
next	;


desc
@@


1.7
log
@-
@
text
@// $Id: bigint.cpp,v 1.6 2017-07-09 22:50:33-07 - - $

#include <cstdlib>
#include <exception>
#include <stack>
#include <stdexcept>
using namespace std;

#include "bigint.h"
#include "debug.h"
#include "relops.h"

bigint::bigint (long that): uvalue (that), is_negative (that < 0) {
   DEBUGF ('~', this << " -> " << uvalue)
}

bigint::bigint (const ubigint& uvalue, bool is_negative):
   uvalue(uvalue), is_negative(is_negative) {
}

bigint::bigint (const string& that) {
   is_negative = that.size() > 0 and that[0] == '_';
   uvalue = ubigint (that.substr (is_negative ? 1 : 0));
}

bigint bigint::operator+ () const {
   return *this;
}

bigint bigint::operator- () const {
   return {uvalue, not is_negative};
}

//checks to see if both values are negative
//if both negative, add together than add negative sign to it
bigint bigint::operator+ (const bigint& that) const {
   if (is_negative and that.is_negative){
      return {uvalue+that.uvalue, true};
}
   //checks to see if one of the numbers is negative
   //if they are equal in value, return 0
   //if first>2nd, do return (1st-2nd, negative)
   //if 2nd> 1st do return (1st-2nd, positive)
   //vice versa for 2nd number
   else if (is_negative or that.is_negative){
      if (uvalue > that.uvalue){
         if (is_negative){
            return {uvalue - that.uvalue, true};
         }
         else{
            return {uvalue - that.uvalue, false};
         }
      }
         //that.uvalue >uvalue
         else if (that.uvalue > uvalue){
            if (that.is_negative){
               return {that.uvalue - uvalue, true};
               }
            else{
               return {that.uvalue - uvalue, false};
            }

          }
      else{
         return uvalue - that.uvalue;
      }
   }

   //if both positive, just add.
   ubigint result = uvalue + that.uvalue;
   return result;
}

bigint bigint::operator- (const bigint& that) const {
   //checks to see if both numbers are negative
   //if 1st>2nd, then it will be negative
   if (is_negative and that.is_negative){
      if (uvalue > that.uvalue ){
         return {uvalue - that.uvalue, true};
      }
      //if 2nd>1st, then must be positive
      else if (that.uvalue > uvalue ){
         return {that.uvalue - uvalue, false};
      }
      else {
         return that.uvalue - uvalue;
      }
   }

   //if 1st or 2nd are negative, then it will add them together
   else if (is_negative or that.is_negative){
      if (is_negative){
         return {uvalue + that.uvalue, true};
      }
      else{
         return {uvalue + that.uvalue, false};
      }
   }
   else{
      if(uvalue< that.uvalue){
         return {that.uvalue - uvalue, true};
       }
       else{
           return uvalue - that.uvalue;
        }


}
}

bigint bigint::operator* (const bigint& that) const {
   //checks to see if both inpputs are negative or  positive
   if( (is_negative and that.is_negative) or
         (not is_negative and not that.is_negative) ){
      bigint result = uvalue * that.uvalue;
      return result;
   }
   else{
      return {uvalue * that.uvalue, true};
   }
}


//same logic as operator*
bigint bigint::operator/ (const bigint& that) const {
   //checks to see if both inpputs are negative or  positive
   if( (is_negative and that.is_negative) or
         (not is_negative and not that.is_negative) ){
      bigint result = uvalue / that.uvalue;
      return result;
   }
   else{
      return {uvalue / that.uvalue, true};
   }
}

//same logic as operator*
bigint bigint::operator% (const bigint& that) const {
   //checks to see if both inpputs are negative or  positive
   if( (is_negative and that.is_negative) or
         (not is_negative and not that.is_negative) ){
      bigint result = uvalue % that.uvalue;
      return result;
   }
   else{
      return {uvalue  % that.uvalue, true};
   }
}

bool bigint::operator== (const bigint& that) const {
   return is_negative == that.is_negative and uvalue == that.uvalue;
}

bool bigint::operator< (const bigint& that) const {
   if (is_negative != that.is_negative) return is_negative;
   return is_negative ? uvalue > that.uvalue
                      : uvalue < that.uvalue;
}

ostream& operator<< (ostream& out, const bigint& that) {
   return out << (that.is_negative ? "-" : "")
              << that.uvalue;
}
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: bigint.cpp,v 1.2 2017-07-09 17:24:45-07 - - $
d100 6
a105 6
	   if(uvalue< that.uvalue){
		   return {that.uvalue - uvalue, true};
	   }
	   else{
		   return uvalue - that.uvalue;
	   }
@


1.5
log
@-
@
text
@d99 7
d107 2
a108 2
   ubigint result = uvalue - that.uvalue;
   return result;
@


1.4
log
@-
@
text
@d31 1
a31 1
	return {uvalue, not is_negative};
d59 13
a71 13
			else{
				return {that.uvalue - uvalue, false};
			}

		}
		else{
			return uvalue - that.uvalue;
		}
	}

	//if both positive, just add.
	ubigint result = uvalue + that.uvalue;
	return result;
d75 24
a98 24
	//checks to see if both numbers are negative
	//if 1st>2nd, then it will be negative
	if (is_negative and that.is_negative){
		if (uvalue > that.uvalue ){
			return {uvalue - that.uvalue, true};
		}
		//if 2nd>1st, then must be positive
		else if (that.uvalue > uvalue ){
			return {that.uvalue - uvalue, false};
		}
		else {
			return that.uvalue - uvalue;
		}
	}

	//if 1st or 2nd are negative, then it will add them together
	else if (is_negative or that.is_negative){
		if (is_negative){
			return {uvalue + that.uvalue, true};
		}
		else{
			return {uvalue + that.uvalue, false};
		}
	}
d100 2
a101 2
	ubigint result = uvalue - that.uvalue;
	return result;
d105 9
a113 9
	//checks to see if both inpputs are negative or  positive
	if( (is_negative and that.is_negative) or
			(not is_negative and not that.is_negative) ){
		bigint result = uvalue * that.uvalue;
		return result;
	}
	else{
		return {uvalue * that.uvalue, true};
	}
d119 9
a127 9
	//checks to see if both inpputs are negative or  positive
	if( (is_negative and that.is_negative) or
			(not is_negative and not that.is_negative) ){
		bigint result = uvalue / that.uvalue;
		return result;
	}
	else{
		return {uvalue / that.uvalue, true};
	}
d132 9
a140 9
	//checks to see if both inpputs are negative or  positive
	if( (is_negative and that.is_negative) or
			(not is_negative and not that.is_negative) ){
		bigint result = uvalue % that.uvalue;
		return result;
	}
	else{
		return {uvalue  % that.uvalue, true};
	}
d144 1
a144 1
	return is_negative == that.is_negative and uvalue == that.uvalue;
@


1.3
log
@-
@
text
@d27 1
a27 1
	return *this;
d37 22
a58 22
	if (is_negative and that.is_negative){
		return {uvalue+that.uvalue, true};
	}
	//checks to see if one of the numbers is negative
	//if they are equal in value, return 0
	//if first>2nd, do return (1st-2nd, negative)
	//if 2nd> 1st do return (1st-2nd, positive)
	//vice versa for 2nd number
	else if (is_negative or that.is_negative){
		if (uvalue > that.uvalue){
			if (is_negative){
				return {uvalue - that.uvalue, true};
			}
			else{
				return {uvalue - that.uvalue, false};
			}
		}
		//that.uvalue >uvalue
		else if (that.uvalue > uvalue){
			if (that.is_negative){
				return {that.uvalue - uvalue, true};
			}
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: bigint.cpp,v 1.1 2017-07-09 17:17:53-07 - - $
d22 2
a23 2
	is_negative = that.size() > 0 and that[0] == '_';
	uvalue = ubigint (that.substr (is_negative ? 1 : 0));
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: bigint.cpp,v 1.76 2016-06-14 16:34:24-07 - - $
d19 1
a19 1
	}
@
